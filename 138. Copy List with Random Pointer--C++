/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if (!head)
            return head;
        RandomListNode * curr = head;
        while (curr) {
            RandomListNode * temp = new RandomListNode(curr->label);
            temp->next = curr->next;
            curr->next = temp;
            curr = temp->next;
        }
        curr = head;
        while (curr) {
            curr->next->random = curr->random? curr->random->next: NULL;
            curr = curr->next->next;
        }
        RandomListNode * original = head;
        RandomListNode * copy = head->next;
        RandomListNode * temp = copy;
        while (original && copy) {
            original->next = original->next->next;
            copy->next = copy->next?copy->next->next:copy->next;
            original = original->next;
            copy = copy->next;
        }
        return temp;
    }
};
