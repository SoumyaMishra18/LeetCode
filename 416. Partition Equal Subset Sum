DP solution:

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum & 1) return false;
        int half = sum >> 1;
        vector<bool> reach(half+1, false);
        reach[0] = true;
        for (int n : nums) {
            for (int i = half; i >=n; i--) 
                if (reach[i - n] == true)
                    reach[i] = true;
        }
        return reach[half];
    }
};

Bitset method:

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        bitset<100*200/2 + 1> bits(1);
        int sum = 0;
        for (int n : nums) {
            sum = sum + n;
            bits = bits | bits << n;
        }
        return !(sum % 2) && bits[sum/2];
    }
};
